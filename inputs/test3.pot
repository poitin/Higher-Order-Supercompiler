import NatList

main = transpose (transpose (gen (pow n n)));

rep n x = case n of
          Zero -> Nil
          | Succ(m) -> Cons(x, rep m x);

gen n = rep n (rep n n);

transpose xs = case xs of
                Nil -> Nil
                | Cons(hs, xss) -> (case hs of
                                    Nil -> transpose xss
                                    | Cons(x,xs) -> case (helper xss) of P(hds, tls) -> combine x hds xs tls);

combine y h ys t = Cons(Cons(y,h), (transpose (Cons(ys,t))));

unzip xs = case xs of
              Nil -> P([], [])
              | Cons(hx, tx) -> (case hx of P(a,b) -> (case (unzip tx) of P(as, bs) -> P(Cons(a,as), Cons(b,bs))));

helper xss = unzip (map (\xs -> case xs of Cons(hd, tl) -> P(hd, tl) | Nil -> P(0,[])) xss)
