main = mOp op m;

reduceTree n1 n2 =    
    (case n1 of 
          None -> (case n2 of 
                        None -> None                                                  
                        | Val (v1) -> (Node (n1, n2))
                        | Node (m1, m2) -> (Node (n1, n2)))
          | Val (v2) -> (Node (n1, n2))
          | Node (l1, l2) -> (Node (n1, n2)));

mOp g m = 
    case m of         
           None -> None
         | Val (v1) -> (g v1)
         | Node (q1, q2) -> (reduceTree (mOp g q1) (mOp g q2))